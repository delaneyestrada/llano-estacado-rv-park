import * as fb from "@/plugins/firebase";

export const state = () => ({
  userProfile: {},
});

export const getters = {
  user: (state) => state,
};

export const actions = {
  async nuxtServerInit({ dispatch }, ctx) {
    // INFO -> Nuxt-fire Objects can be accessed in nuxtServerInit action via this.$fire___, ctx.$fire___ and ctx.app.$fire___'
    /** Get the VERIFIED authUser on the server */
    if (ctx.res && ctx.res.locals && ctx.res.locals.user) {
      const { allClaims: claims, ...authUser } = ctx.res.locals.user;

      console.info(
        "Auth User verified on server-side. User: ",
        authUser,
        "Claims:",
        claims
      );

      await dispatch("onAuthStateChanged", {
        authUser,
        claims,
      });
    }
  },
  async onAuthStateChanged({ commit }, { authUser }) {
    if (!authUser) {
      commit("RESET_STORE");
      return;
    }
    if (authUser && authUser.getIdToken) {
      try {
        const idToken = await authUser.getIdToken(true);
        console.info("idToken", idToken);
      } catch (e) {
        console.error(e);
      }
    }
    commit("SET_AUTH_USER", { authUser });
  },
  async login({ dispatch }, form) {
    // sign user in
    const { user } = await fb.auth.signInWithEmailAndPassword(
      form.email,
      form.password
    );

    // fetch user profile and set in state
    dispatch("fetchUserProfile", user);
  },
  async fetchUserProfile({ commit }, user) {
    // fetch user profile
    const userProfile = await fb.usersCollection.doc(user.uid).get();

    // set user profile in state
    commit("setUserProfile", userProfile.data());
  },
  async register({ dispatch }, form) {
    // sign user up
    const { user } = await fb.auth.createUserWithEmailAndPassword(
      form.email,
      form.password
    );

    // create user profile object in userCollections
    await fb.usersCollection.doc(user.uid).set({
      username: form.username,
      email: form.email,
      builds: [],
    });

    // fetch user profile and set in state
    dispatch("fetchUserProfile", user);
  },
  async logout({ commit }) {
    await fb.auth.signOut();

    // clear userProfile and redirect to /login
    commit("setUserProfile", {});
  },
};

export const mutations = {
  setUserProfile(state, val) {
    state.userProfile = val;
  },
};
